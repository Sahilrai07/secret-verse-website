// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------ Enums ------------------
enum UserRole {
  USER
  VENDOR
  ADMIN
  SUPERADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  PURCHASE
  REDEEM
  REFUND
}

// ------------------ Auth.js / NextAuth Models ------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

// ------------------ Business Models ------------------
model Admin {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      UserRole  @default(ADMIN)
  name      String
  phone     String?
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Vendor {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  phone      String?
  address    String?
  city       String?
  state      String?
  country    String?
  password   String?
  role       UserRole  @default(VENDOR)
  isApproved Boolean   @default(false) // âœ… must be approved by Admin
  stores     Store[] // âœ… each vendor can have one or more stores
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Store {
  id          String  @id @default(uuid())
  name        String
  description String?
  logo        String?
  banner      String?
  isActive    Boolean @default(true)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  emailVerified DateTime? // ðŸ‘ˆ Required by NextAuth
  phone         String?
  gender        String?
  address       String?
  city          String?
  state         String?
  country       String?
  image         String?
  dateOfBirth   DateTime?
  password      String?
  role          UserRole      @default(USER)
  isVerified    Boolean       @default(false)
  orders        Order[]
  transactions  Transaction[]
  coinBalance   Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // ðŸ”‘ NextAuth relations
  accounts Account[]
  sessions Session[]
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Int // price in paisa/cents
  stock       Int
  coinPrice   Int
  salePrice   Int?
  image       String
  category    String?
  brand       String?
  size        String?
  color       String?
  isFeatured  Boolean @default(false)
  allowCoins  Boolean @default(true)
  minCoins    Int     @default(0)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  productId String
  amount    Int
  coinUsed  Int         @default(0)
  status    OrderStatus @default(PENDING)

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String          @id @default(uuid())
  userId    String
  type      TransactionType @default(PURCHASE)
  details   String?
  amount    Int
  createdAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id])
}
